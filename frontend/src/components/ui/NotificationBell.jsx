import { useEffect, useRef, useState } from "react";
import { apiGet, apiPost } from "../../lib/api";

/**
 * Ki·ªÉu d·ªØ li·ªáu notification g·ª£i √Ω t·ª´ backend:
 * {
 *   id: number|string,
 *   title: string,
 *   body?: string,
 *   created_at: string,  // ISO
 *   read: boolean
 * }
 */

function timeAgo(iso) {
  const d = new Date(iso);
  const diff = Math.max(0, Date.now() - d.getTime());
  const mins = Math.floor(diff / 60000);
  if (mins < 1) return "v·ª´a xong";
  if (mins < 60) return `${mins} ph√∫t tr∆∞·ªõc`;
  const hrs = Math.floor(mins / 60);
  if (hrs < 24) return `${hrs} gi·ªù tr∆∞·ªõc`;
  const days = Math.floor(hrs / 24);
  return `${days} ng√†y tr∆∞·ªõc`;
}

export default function NotificationBell() {
  const [open, setOpen] = useState(false);
  const [items, setItems] = useState([]);
  const [unread, setUnread] = useState(0);
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState("");
  const ref = useRef(null);

  // ƒë√≥ng khi click ngo√†i
  useEffect(() => {
    const onDoc = (e) => {
      if (ref.current && !ref.current.contains(e.target)) setOpen(false);
    };
    document.addEventListener("click", onDoc);
    return () => document.removeEventListener("click", onDoc);
  }, []);

  // load ƒë·∫øm nhanh (poll nh·∫π m·ªói 30s)
  useEffect(() => {
    let mounted = true;

    const refreshCount = async () => {
      try {
        const res = await apiGet("/notifications/count?unread=1");
        if (!mounted) return;
        setUnread(Number(res?.count || 0));
      } catch {
        /* im l·∫∑ng */
      }
    };

    refreshCount();
    const t = setInterval(refreshCount, 30000);
    return () => {
      mounted = false;
      clearInterval(t);
    };
  }, []);

  // m·ªü dropdown th√¨ t·∫£i danh s√°ch
  useEffect(() => {
    if (!open) return;
    let mounted = true;
    (async () => {
      setLoading(true);
      setErr("");
      try {
        const res = await apiGet("/notifications?limit=20&order=desc"); // t√πy API
        if (!mounted) return;
        const list = Array.isArray(res?.data) ? res.data : (Array.isArray(res) ? res : []);
        setItems(list);
        setUnread(list.filter((n) => !n.read).length);
      } catch (e) {
        setErr("Kh√¥ng t·∫£i ƒë∆∞·ª£c th√¥ng b√°o.");
      } finally {
        setLoading(false);
      }
    })();
    return () => { mounted = false; };
  }, [open]);

  // ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc t·∫•t c·∫£ (khi ng∆∞·ªùi d√πng b·∫•m ‚Äúƒê√°nh d·∫•u ƒë√£ ƒë·ªçc‚Äù)
  const markAllRead = async () => {
    // l·∫°c quan
    setItems((prev) => prev.map((n) => ({ ...n, read: true })));
    setUnread(0);
    try {
      await apiPost("/notifications/mark-read", { all: true });
    } catch {
      // n·∫øu l·ªói, kh√¥i ph·ª•c tr·∫°ng th√°i g·∫ßn ƒë√∫ng b·∫±ng c√°ch refetch nhanh
      try {
        const res = await apiGet("/notifications?limit=20&order=desc");
        const list = Array.isArray(res?.data) ? res.data : (Array.isArray(res) ? res : []);
        setItems(list);
        setUnread(list.filter((n) => !n.read).length);
      } catch { /* b·ªè qua */ }
    }
  };

  // ƒë√°nh d·∫•u 1 c√°i ƒë√£ ƒë·ªçc khi click v√†o
  const openOne = async (n) => {
    // v√≠ d·ª• m·ªü link n·∫øu c√≥
    if (n.url) window.location.href = n.url;

    if (!n.read) {
      setItems((prev) => prev.map((x) => x.id === n.id ? { ...x, read: true } : x));
      setUnread((u) => Math.max(0, u - 1));
      try {
        await apiPost("/notifications/mark-read", { id: n.id });
      } catch { /* b·ªè qua */ }
    }
  };

  return (
    <div className="relative" ref={ref}>
      <button
        className="relative inline-grid place-items-center w-10 h-10 rounded-lg border border-slate-200 hover:bg-slate-50 transition"
        title="Th√¥ng b√°o"
        aria-haspopup="menu"
        aria-expanded={open}
        onClick={() => setOpen((v) => !v)}
      >
        <span className="text-[18px]">üîî</span>
        {unread > 0 && (
          <span className="absolute -right-0.5 -top-0.5 min-w-[18px] h-[18px] px-1 bg-rose-500 text-white text-[11px] leading-[18px] rounded-full text-center">
            {unread > 99 ? "99+" : unread}
          </span>
        )}
      </button>

      {open && (
        <div
          className="absolute right-0 mt-3 w-[380px] max-w-[92vw] rounded-xl border border-slate-200 bg-white shadow-lg overflow-hidden"
          role="menu"
        >
          <div className="flex items-center justify-between px-3 py-2 border-b border-slate-200">
            <div className="font-semibold">Th√¥ng b√°o</div>
            <button
              className="text-sm text-emerald-700 hover:underline disabled:opacity-50"
              onClick={markAllRead}
              disabled={unread === 0 || loading}
            >
              ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
            </button>
          </div>

          {loading && (
            <div className="p-4 text-slate-500 text-sm">ƒêang t·∫£i‚Ä¶</div>
          )}

          {!loading && err && (
            <div className="p-4 text-rose-600 text-sm">{err}</div>
          )}

          {!loading && !err && items.length === 0 && (
            <div className="p-6 text-center text-slate-500 text-sm">Ch∆∞a c√≥ th√¥ng b√°o.</div>
          )}

          {!loading && !err && items.length > 0 && (
            <ul className="max-h-[420px] overflow-auto">
              {items.map((n) => (
                <li
                  key={n.id}
                  className={[
                    "px-3 py-3 border-b border-slate-100 cursor-pointer",
                    n.read ? "bg-white hover:bg-slate-50" : "bg-emerald-50/60 hover:bg-emerald-50"
                  ].join(" ")}
                  onClick={() => openOne(n)}
                >
                  <div className="flex items-start gap-3">
                    <div className="mt-1 select-none">üì£</div>
                    <div className="min-w-0">
                      <div className="font-medium text-[15px] truncate">{n.title || "Th√¥ng b√°o"}</div>
                      {n.body && <div className="text-slate-600 text-[13px] line-clamp-2">{n.body}</div>}
                      <div className="text-slate-400 text-[12px] mt-1">{timeAgo(n.created_at)}</div>
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          )}
        </div>
      )}
    </div>
  );
}
